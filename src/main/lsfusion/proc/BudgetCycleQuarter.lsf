MODULE BudgetCycleQuarter;

REQUIRE BudgetCycle;

NAMESPACE Budget;

//--- Quarterly aggregated Budget proposals ---

CLASS BudgetQuarter : BudgetPortion;
TABLE budgetquarter(BudgetQuarter);

budgetingCostCenter 'Number of Budget Items by Cost Center' = 
        GROUP SUM 1 BY costCenter(BudgetDetail d);

budgetingQuarterCostCenter 'Number of Budget Items by Cost Center in Quarter' = 
        GROUP SUM 1 BY costCenter(BudgetDetail d), quarterNumber(budget(d));

proposalQuarter 'Quarter Aggregation' = AGGR BudgetQuarter WHERE budgetingQuarterCostCenter(CostCenter costCq, INTEGER quarter) AND quarterBudgeting(quarter) MATERIALIZED INDEXED;

partQuarter 'Quarter Budget Proposal' (BudgetDetail d) = proposalQuarter(costCenter(d),quarterNumber(budget(d)));

period (CostCenter c, INTEGER q) = GROUP LAST period(c,Budget b) IF quarterNumber(b) == q;

quarter(BudgetQuarter b) += quarter(b);
quarterBudgeting(BudgetQuarter b) += quarterBudgeting(quarter(b));
quarterName 'Quarter' (BudgetQuarter b) = quarterName(quarter(b));

FORM dialogQuarter
    OBJECTS b = BudgetQuarter
    PROPERTIES READONLY quarterName(b)
    FILTERS costCq(b) = [GROUP LAST CostCenter c IF budgetingQuarterCostCenter(c,INTEGER i) BY i](quarter(b))
    
    LIST BudgetQuarter OBJECT b
;

WHEN SETCHANGED(partQuarter[BudgetDetail](BudgetDetail d)) DO
    part[BudgetDetail](d) <- partQuarter[BudgetDetail](d);

WHEN SETCHANGED(partQuarter[BudgetDetail](BudgetDetail d)) DO
    dateTime[BudgetPortion](partQuarter(d)) <- currentDateTime();

WHEN SETCHANGED(planned[BudgetDetail](BudgetDetail d)) DO
    author[BudgetPortion](partQuarter(d)) <- author(d);

WHEN SETCHANGED(costCq[BudgetQuarter](BudgetQuarter d)) DO
    costCenter[BudgetPortion](d) <- costCq[BudgetQuarter](d);

WHEN SET(BudgetQuarter d IS BudgetQuarter) DO
    step[BudgetPortion](d) <- Step.update;

EXTEND FORM budgetPortionsOverview PROPERTIES budgetingQuarterCostCenter(cq,qq) AFTER quarterPlannedInteger(cq,qq);

isRevokable (CostCenter c, Budget b) = TRUE IF quarterBudgeting(quarterNumber(b)) AND (step(proposalQuarter(c,quarterNumber(b))) == Step.enter OR step(proposalQuarter(c,quarterNumber(b))) == Step.review);
revokeBudget 'Revoke Budget' (CostCenter c, Budget b) {
    IF quarterBudgeting(quarterNumber(b)) THEN {
        stepOut(stepLog(proposalQuarter(c,quarterNumber(b)))) <- Step.reject;
        APPLY;
    }
} TOOLBAR;
EXTEND FORM costCenterBudget PROPERTIES revokeBudget(c,bm) DRAW bmd SHOWIF isRevokable(c,bm);

readonlyProc (Budget d, CostCenter c) = isApproved(proposalQuarter(c,quarterNumber(d))) OR NOT quarterBudgeting(quarterNumber(d)); //  OR NOT afg(currentUser())
readonlyProc (INTEGER q, CostCenter c) = isApproved(proposalQuarter(c,q)) OR NOT quarterBudgeting(q);
readonlyProc (INTEGER q, Period p) = readonlyProc(q, costCenter(p));

EXTEND FORM reviewCostCentersApprove FILTERS isApproved(proposalQuarter(c,q));

EXTEND FORM costCenterBudget OBJECTS ol=(o = BudgetPortion,l = StepLog) PROPERTIES planned(l) READONLY FILTERS sbj(l) == o AND o == proposalQuarter(c,q) AND stepOut(l);
DESIGN costCenterBudget {
    monthlyTabPane {
        NEW stepLog BEFORE monthlyExpense {
            fill = 1;
            alignment = STRETCH;
            caption = 'Approval log';
            type = CONTAINERV;
            MOVE BOX(ol);
        }
    }
}
@showStepAttributes(costCenterBudget,out);
EXTEND FORM costCenterBudget PROPERTIES(o) dropApproval SHOWIF isApprovedDrop(o) DRAW ol, revokeBudget SHOWIF isRevokable(o) DRAW ol;
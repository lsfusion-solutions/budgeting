MODULE EmployeeHiring;

REQUIRE EmployeeB, Country, Connector;

NAMESPACE Employee;

DESIGN employee {
    tabbedPane {
        NEW hiring {
            caption = 'Hiring';
        }
    }
}

META addFile(id, cap)
    id cap = DATA FILE (Employee);
    open###id 'Open' (Employee e) { open(id(e)); }
    load###id 'Load' (Employee e) { INPUT =id(e) CHANGE; }
    drop###id 'Drop' (Employee e) { id(e) <- NULL; }
    
    EXTEND FORM employee
        PROPERTIES open###id(e) SHOWIF TRUE IF id(e), load###id(e), drop###id(e) SHOWIF TRUE IF id(e) 
    ;
    
    DESIGN employee { hiring { NEW id { caption = cap; MOVE PROPERTY(open###id(e)) { width = 100; }; MOVE PROPERTY(load###id(e)) { width = 100; }; MOVE PROPERTY(drop###id(e)) { width = 100; }; } } }

END

@addFile(NDA, 'NDA');

@addFile(employeeContract, 'Employee contract');

@addFile(independentContract, 'Independent contract');

@addFile(contractRUS, 'Contract RUS');

@addFile(offerLetter, 'Offer letter');

@addFile(w8ben, 'W-8BEN');

slackAccount 'Slack account' = DATA BOOLEAN (Employee);
trelloEstablished 'Trello established' = DATA BOOLEAN (Employee);

@gsssRowNumberGet (Employee, email, team, 'E:E');
// Implementation of link to Google Spreadsheet by the following parameters:
//      Employee - name of this Object
//      email - key property for one-to-one link
//      team - name of gsssTeam() global property, which contains the Spreadsheet spreadsheetId
//      'E:E' - range address of the Spreadsheet' Column, which contains the key value

// Citizenship

citizenship 'Citizenship' = DATA Country(Employee);
nameCitizenship 'Citizenship' (Employee e) = name(citizenship(e));
includeCitizenship 'Inc.' = DATA BOOLEAN (Employee, Country);
citizenships 'Citizenships' (Employee e) = GROUP CONCAT name(Country c) IF includeCitizenship(e, c), ', ' ORDER name(c) CHARWIDTH 15;

FORM dialogCitizenships 'Citizenships'
    OBJECTS e = Employee PANEL 
    OBJECTS c = Country
    PROPERTIES includeCitizenship(e, c), name(c) READONLY 
    PROPERTIES (c) NEWSESSION NEW, EDIT, DELETE 
;

changeCitizenships (Employee e) {
    SHOW dialogCitizenships OBJECTS e = e;
}

// Language level

CLASS LanguageLevel 'Language level';
TABLE languageLevel (LanguageLevel);

name 'Наименование' = DATA ISTRING[100] (LanguageLevel) CHARWIDTH 15;

FORM languageLevel 'Language level'
    OBJECTS o = LanguageLevel PANEL
    PROPERTIES(o) name
    
    EDIT LanguageLevel OBJECT o
;

FORM languageLevels 'Language level'
    OBJECTS o = LanguageLevel
    PROPERTIES(o) READONLY name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE

    LIST LanguageLevel OBJECT o
;

NAVIGATOR {
    masterData {
        NEW languageLevels;
    }
}

languageLevel 'Language level' = DATA LanguageLevel(Employee);
nameLanguageLevel 'Language level' (Employee e) = name(languageLevel(e));

// Visa status
CLASS VisaStatus 'Visa status';
TABLE visaStatus (VisaStatus);

name 'Наименование' = DATA ISTRING[100] (VisaStatus) CHARWIDTH 15;

FORM visaStatus 'Visa status'
    OBJECTS o = VisaStatus PANEL
    PROPERTIES(o) name
    
    EDIT VisaStatus OBJECT o
;

FORM visaStatuss 'Visa status'
    OBJECTS o = VisaStatus
    PROPERTIES(o) READONLY name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogVisaStatuss 'Visa status'
    OBJECTS o = VisaStatus
    PROPERTIES(o) READONLY name
    
    LIST VisaStatus OBJECT o
;

NAVIGATOR {
    masterData {
        NEW visaStatuss;
    }
}
CLASS Visa 'Visa';
TABLE visa(Visa);

from 'From' = DATA DATE (Visa);
to 'To' = DATA DATE (Visa);

employee = DATA Employee (Visa) NONULL DELETE;

country 'Country' = DATA Country(Visa) NONULL;
nameCountry 'Country' (Visa v) = name(country(v));

visaStatus 'Status' = DATA VisaStatus (Visa);
nameVisaStatus 'Status' (Visa v) = name(visaStatus(v));

laptop 'Laptop' = DATA BOOLEAN (Employee);
pc 'PC' = DATA BOOLEAN (Employee);

// product owner
scrum 'SCRUM on-boarding' = DATA BOOLEAN (Employee);
brexCard 'Brex card' = DATA BOOLEAN (Employee); 
ielts 'IELTS' = DATA ISTRING[50](Employee) CHARWIDTH 15;

EXTEND FORM employees
    PROPERTIES(e) READONLY slackAccount, trelloEstablished, 
                           citizenships, nameLanguageLevel
                  
    PROPERTIES(e) READONLY laptop, pc
                  
    PROPERTIES(e) READONLY SHOWIF name(mainRole(e)) = 'Product Owner' scrum, brexCard
;

EXTEND FORM employee
    PROPERTIES(e) slackAccount, trelloEstablished, gsssTeamRow, gsssTeamRowGet,
                  citizenships ON CHANGE changeCitizenships(e), nameLanguageLevel
                  
    PROPERTIES(e) laptop, pc, ielts
                  
    OBJECTS v = Visa
    PROPERTIES(v) nameCountry, from, to, nameVisaStatus, NEW, DELETE
    FILTERS employee(v) = e
    
    PROPERTIES(e) SHOWIF name(mainRole(e)) = 'Product Owner' scrum, brexCard
;

DESIGN employee {
    hiring {
        NEW documents {
            type = CONTAINERH;
            MOVE NDA;
            MOVE employeeContract;
            MOVE independentContract;
            MOVE offerLetter;
            MOVE contractRUS;
            MOVE w8ben;        
        }
        NEW contactInfo {
            type = CONTAINERH;
            caption = 'Contact info';
            MOVE PROPERTY(slackAccount(e));
            MOVE PROPERTY(trelloEstablished(e));
            MOVE PROPERTY(gsssTeamRow(e));
            MOVE PROPERTY(gsssTeamRowGet(e));
        }
        NEW personalInfo {
            type = CONTAINERH;
            caption = 'Personal info';
            MOVE PROPERTY(citizenships(e));
            MOVE PROPERTY(nameLanguageLevel(e));
            MOVE PROPERTY(ielts(e));
            MOVE PROPERTY(laptop(e));
            MOVE PROPERTY(pc(e));
        }
        MOVE BOX(v);
        NEW productOwner {
            type = CONTAINERH;
            MOVE PROPERTY(scrum(e));
            MOVE PROPERTY(brexCard(e));
        }
    }
}

CLASS Equipment 'Equipment';
TABLE equipment (Equipment);

number 'Serial number' = DATA ISTRING[100] (Equipment) CHARWIDTH 15;
model 'Model' = DATA ISTRING[100](Equipment) CHARWIDTH 15;

employee = DATA Employee(Equipment) NONULL DELETE;

CLASS EquipmentType 'Equipment type';
TABLE equipmentType(EquipmentType);

name 'Name' = DATA ISTRING[100](EquipmentType);

FORM equipmentType 'Equipment type'
    OBJECTS t = EquipmentType PANEL 
    PROPERTIES (t) name
    
    EDIT EquipmentType OBJECT t
;

FORM equipmentTypes 'Equipment types'
    OBJECTS t = EquipmentType
    PROPERTIES (t) READONLY name
    PROPERTIES (t) NEWSESSION NEW, DELETE 
    
    LIST EquipmentType OBJECT t
;

type = DATA EquipmentType(Equipment);
nameType 'Type' (Equipment e) = name(type(e));

EXTEND FORM employee
    OBJECTS q = Equipment
    PROPERTIES (q) number, model, nameType, NEW, DELETE 
    FILTERS employee(q) == e
;

CLASS Document 'Document';
TABLE document (Document);

name 'Name' = DATA ISTRING[100] (Document) CHARWIDTH 15;

CLASS DocumentType 'Document type';
TABLE documentType (DocumentType);

name 'Name' = DATA ISTRING[100] (DocumentType) CHARWIDTH 15;

FORM documentType 'Document type'
    OBJECTS o = DocumentType PANEL
    PROPERTIES(o) name
    
    EDIT DocumentType OBJECT o
;

type = DATA DocumentType(Document);
nameType 'Document type' (Document d) = name(type(d));

employee = DATA Employee(Document) NONULL DELETE;
nameEmployee 'Employee' (Document d) = name(employee(d));

file = DATA FILE (Document);

openFile 'Open' (Document a)  { open(file(a)); }
loadFile 'Load' (Document a)  { INPUT =file(a) CHANGE; }
deleteFile 'Delete' (Document a)  { NEWSESSION DELETE FILE f WHERE f = file(a); } CONFIRM;

FORM documentTypes 'Document type'
    OBJECTS o = DocumentType
    PROPERTIES(o) READONLY name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
    
    LIST DocumentType OBJECT o
;

NAVIGATOR {
    masterData {
        NEW documentTypes;
    }
}

FORM document 'Document'
    OBJECTS o = Document PANEL
    PROPERTIES(o) name, nameType, nameEmployee, openFile SHOWIF TRUE IF file(o), loadFile, deleteFile
    
    EDIT Document OBJECT o
;

EXTEND FORM employee
    OBJECTS d = Document
    PROPERTIES (d) name, nameType, openFile GRID, loadFile GRID, deleteFile GRID, NEW, DELETE
    FILTERS employee(d) == e
;

DESIGN employee {
    tabbedPane {
        hiring {
            MOVE BOX (v) AFTER personalInfo;
        }
        NEW equipment {
            caption = 'Equipment';
            fill = 1;
            NEW pc {
                type = CONTAINERH;
                MOVE PROPERTY (laptop(e));
                MOVE PROPERTY (pc(e));
            }
            MOVE BOX (q);
        }
        NEW docs {
            caption = 'Documents';
            MOVE documents;
            MOVE BOX (d); 
        }
    }   
}
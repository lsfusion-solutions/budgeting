MODULE BudgetPurchaseInvoice;

REQUIRE Budget, PurchaseInvoice, Utils;

NAMESPACE Budget;

costCenter 'Cost center' = DATA CostCenter (Invoice);
nameCostCenter 'Cost center' (Invoice i) = name(costCenter(i));

budgetDetail 'Budget detail' = DATA BudgetDetail (Invoice);

CONSTRAINT Invoice i IS Invoice AND NOT budgetDetail(i) MESSAGE 'Plese specify Budget detail';
CONSTRAINT costCenter(Invoice i) != costCenter(budgetDetail(i)) CHECKED BY budgetDetail[Invoice],costCenter[Invoice] MESSAGE 'Cost center is not equal to cost center of budget detail'; 
WHEN LOCAL CHANGED (budgetDetail(Invoice i)) DO { costCenter(i) <- costCenter(budgetDetail(i)); }

completeNameBudgetDetail 'Budget detail' (Invoice i) = completeName(budgetDetail(i));
nameBudget 'Budget' (Invoice i) = nameBudget(budgetDetail(i));
itemBudgetDetail 'Budget item' (Invoice i) = name(budgetDetail(i));

EXTEND FORM invoice
    PROPERTIES(i) nameCostCenter, completeNameBudgetDetail
;
DESIGN invoice {
    OBJECTS {
        invoice {
            NEW budget AFTER file {
                alignment = STRETCH;
                caption = 'Budget';
                MOVE PROPERTY(nameCostCenter(i));
                MOVE PROPERTY(completeNameBudgetDetail(i));
            }
        }
    }
}


FORM invoices 'Purchase Invoices'
    PROPERTIES() nameFilterCostCenter, nameFilterBudget
    
    TREE costItems t = CostItem PARENT parent(t)
    PROPERTIES(t) READONLY order SHOWIF NULL, name
    ORDERS order(t) 

    OBJECTS i = Invoice
    PROPERTIES(i) READONLY date, number, nameSupplier, nameCurrency, amount //, approved, dateTimeApproved, nameUserApproved, note
    PROPERTIES(i) TOOLBAR open SHOWIF hasFile(i), copy
    PROPERTIES(i) READONLY nameCostCenter, completeNameBudgetDetail
    PROPERTIES(i) NEWSESSION EDIT, DELETE
    ORDERS date(i) DESC 
    FILTERS costCenter(budgetDetail(i)) == filterCostCenter() OR NOT filterCostCenter(),
            budget(budgetDetail(i)) == filterBudget() OR NOT filterBudget(),
            isParent(costItem(budgetDetail(i)),t) OR NOT budgetDetail(i)
;

DESIGN invoices {
    OBJECTS {
        NEW filters FIRST {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY(nameFilterCostCenter()) {alignment = STRETCH; caption = 'Select Cost Center'; }
        }
        NEW items {
            horizontal = TRUE;
            fill = 1;
            alignment = STRETCH;
            NEW selectors {
                type = CONTAINERV;
                fill = 1;
                alignment = STRETCH;
                MOVE PROPERTY (nameFilterBudget()) { alignment = STRETCH; }
                MOVE BOX (TREE costItems) { 
                    fill = 1;
                    caption = 'Cost Items'; 
                }
            }
            MOVE BOX (i) { 
                fill = 3;
                PROPERTY (amount(i)) { pattern = '#,##0.00'; }
            }
        }
    }
}

invoiced 'Invoiced, USD' (Invoice i) = NUMERIC[14,2](round0(amount(i) / defaultRateOn(currency(i), (OVERRIDE date(i),currentDate()))));

overCopy(Invoice ni, Invoice i) + {
    costCenter(ni) <- costCenter(i);
    budgetDetail(ni) <- budgetDetail(i);
}


NAVIGATOR {
    NEW invoices;
}
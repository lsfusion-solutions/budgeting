MODULE BudgetCapCenterEmployee;

REQUIRE BudgetCapCenter, CostCenterEmployee, CostItemEmployee, BudgetEmployee, BudgetEmployeeLocation, BudgetCapCenterApproval, Utils, BudgetCycleQuarter;

NAMESPACE Budget;

monthFrom  = DATA Budget(Employee);
nameMonthFrom 'Hiring month' (Employee e) = name(monthFrom(e));

WHEN LOCAL SETCHANGED(hiringDate(Employee e)) DO
    monthFrom (e) <- GROUP LAST Budget b ORDER fromDate(b), b WHERE fromDate(b) <= hiringDate(e);

monthTo = DATA Budget(Employee);
nameMonthTo 'Month of dismissal' (Employee e) = name(monthTo(e));

assigned 'Assigned Period, %' = DATA NUMERIC[8,2] (Period, Employee);

TABLE periodBudgetEmployee (Period, Budget, Employee);
dataAssigned 'Assigned, %' = DATA NUMERIC[8,2] (Period, Budget, Employee);

// Employee may be assigned in the budget by two ways:
//  - assigned to Period by specific percentage, which will be equal in every month (Budget, in general) selected in this Period
//  - percentage may be specific for every month, overriding the first way
assigned 'Assigned, %' (Period p, Budget b, Employee e) = (OVERRIDE dataAssigned(p, b, e), (assigned(p, e) IF selected(p, b))) 
    IF NOT fromDate(b) < fromDate(monthFrom(e)) AND NOT fromDate(b) > fromDate(monthTo(e)) MATERIALIZED; 

CONSTRAINT dataAssigned(Period p, Budget b, Employee e) AND NOT selected(p, b)
    MESSAGE 'Employee is assigned to a month, that is not in selected period';
    
// Connection of Employee to Cost Center is made via the Period.  The total involvement of Employee is calculated for all costcenters
assigned 'Assigned (total), %' (Budget b, Employee e) = GROUP SUM assigned(Period p, b, e);

// In general, more than one Period may by defined for Cost Center
assigned 'Assigned, %' (Budget b, CostCenter c, Employee e) = 
    //GROUP SUM assigned(Period p, b, e) BY costCenter(p) MATERIALIZED;     
    assigned(period(c,b), b, e);

salary 'Salary Gross, USD' (Period p, Employee e, Budget b) = 
    GROUP SUM NUMERIC[16,3](round0(salary(e, b, Currency c) * (OVERRIDE taxCoefficient(b, e), 1.0) * 
                                   assigned(p, b, e) / 100.0 
                                   / defaultRateOn(c, fromDate(b)))) MATERIALIZED;

salary 'Salary Gross, USD' (CostCenter c, Employee e, Budget b) = // salary of this Employee from this Cost Center in this month
    GROUP SUM salary(Period p, e, b) IF selected(p, b) BY costCenter(p);     // through all periods

salary 'Salary Gross, USD' = // salary of this Employee from this Cost Center in this quarter
    GROUP SUM salary(CostCenter c, Employee e, Budget b) BY c,e,quarterNumber(b);     // through all periods

salary 'Salary Gross, USD' (CostCenter c, CostItem i, Budget b) = 
    GROUP SUM salary(c, Employee e, b) BY costItem(e, b);

salary 'Salary Gross, USD' (Period p, Employee e) = 
    GROUP SUM salary(p, e, Budget b) IF selected(p, b);

salary 'Salary Gross, USD' (Period p, CostItem i) = 
    GROUP SUM salary(p, Employee e, Budget b) IF selected(p, b) BY costItem(e, b) MATERIALIZED;

salaryNet 'Salary Net, USD' (Period p, Employee e, Budget b) = 
    GROUP SUM NUMERIC[16,3](round0(salary(e, b, Currency c) * 
                                   assigned(p, b, e) / 100.0 
                                   / defaultRateOn(c, fromDate(b))));

salaryNet 'Salary Net, USD' (Period p, Employee e) = 
    GROUP SUM salaryNet(p, e, Budget b) IF selected(p, b);

EXTEND CLASS ExtraCap {
    salary 'Salary'
}
sensitive (ExtraCap e) += e == ExtraCap.salary;
cap (ExtraCap e, Period p, CostItem i) += WHEN e == ExtraCap.salary AND salary(p, i) THEN salary(p, i);

assignedQuarter 'Overall assignment of Employee within Company for quarter' (Budget b, Employee e) = 
                GROUP CONCAT STRING(left(name(Budget be),3)+': '+STRING[3](INTEGER(assigned(be,e)))+'%'),', ' ORDER fromDate(be) IF quarterNumber(be) == quarterNumber(b);
assignedQuarter 'Overall assignment of Employee within Company for quarter' (INTEGER q, Employee e) = 
                GROUP CONCAT STRING(left(name(Budget be),3)+': '+STRING[3](INTEGER(assigned(be,e)))+'%'),', ' ORDER fromDate(be) IF quarterNumber(be) == q CHARWIDTH 30;
backgroundAssigned (Budget b, Employee e) = RGB(255,212,212) IF assigned(b, e) > 100;
backgroundAssignedQuarter (Budget b, Employee e) = GROUP MAX backgroundAssigned(Budget be,e) IF quarterNumber(be) == quarterNumber(b);
backgroundAssignedQuarter (INTEGER q, Employee e) = GROUP MAX backgroundAssigned(Budget be,e) IF quarterNumber(be) == q;
backgroundProtected (INTEGER q, CostCenter c) = RGB(240,240,240) IF readonlyProc(q, c);
backgroundProtected (INTEGER q, Period p) = backgroundProtected(q, costCenter(p));
backgroundProtected (Period p) = backgroundProtected(quarterNumber(firstBudget(p)), costCenter(p));
isAssignedQuarter (CostCenter c, Budget b, Employee e) = TRUE IF GROUP MAX assigned(period(c,Budget be),be,e) IF quarterNumber(be) == quarterNumber(b);
isAssignedQuarter (CostCenter c, INTEGER q, Employee e) = TRUE IF GROUP MAX assigned(period(c,Budget be),be,e) IF quarterNumber(be) == q;
isAssignedQuarter (Period p, INTEGER q, Employee e) = isAssignedQuarter(costCenter(p),q,e);

searchByName 'Search' = DATA LOCAL NESTED ISTRING ();

// Total Assigned 
EXTEND FORM employees
    OBJECTS b = Budget

    OBJECTS be = Employee
    PROPERTIES(be) READONLY firstName, lastName, namePosition, nameLocation, canonicalNameCostItem, nameMonthFrom, nameMonthTo
    PROPERTIES READONLY assigned(b, be) COLUMNS (b) HEADER name(b)
    FILTERS NOT isCandidate(be)
    
    OBJECTS pb = (pe = Period, bb = Budget)
    PROPERTIES READONLY nameCostCenter(pe), name(bb)
    PROPERTIES assigned(pe, bb, be)
    FILTERS assigned(pe, bb, be)
;

DESIGN employees {
    pane {
        NEW load {
            caption = 'Load';
            type = SPLITV;
            MOVE BOX(be) { fill = 2; }
            MOVE BOX(pb);
        }
    }
}

EXTEND FORM employee PROPERTIES (e) nameMonthFrom, nameMonthTo;

DESIGN employee {
    hiringHeader {
        MOVE PROPERTY (nameMonthFrom(e));
        MOVE PROPERTY (nameMonthTo(e));
    }
}

// Period approval

EXTEND FORM periodApproval
    OBJECTS e = Employee
    PROPERTIES(e) READONLY firstName, lastName, namePosition, canonicalNameCostItem
    PROPERTIES(p, e) READONLY assigned, salary
    FILTERS assigned(p, e)
    
    OBJECTS eb = Budget
    PROPERTIES(eb) READONLY fromDate, toDate, name
    PROPERTIES READONLY salary(p, e, eb)
    FILTERS selected(p, eb)
;

DESIGN periodApproval {
    details {
        NEW team {
            caption = 'Team';
            MOVE BOX(e);
            MOVE BOX(eb);
        }
    }
}

// create budget detail

CLASS SalaryBudgetDetail 'Budget detail (salary)' : BudgetDetail;
TABLE salaryBudgetDetail (SalaryBudgetDetail);

sensitive (SalaryBudgetDetail d) += TRUE IF d IS SalaryBudgetDetail;

salaryBudgetDetail (CostCenter costCenter, CostItem costItem, Budget budget) = AGGR SalaryBudgetDetail WHERE salary(costCenter, costItem, budget) MATERIALIZED INDEXED;

WHEN SETCHANGED(costCenter[SalaryBudgetDetail](SalaryBudgetDetail d)) DO
    costCenter[BudgetDetail](d) <- costCenter[SalaryBudgetDetail](d);

WHEN SETCHANGED(costItem[SalaryBudgetDetail](SalaryBudgetDetail d)) DO
    costItem[BudgetDetail](d) <- costItem[SalaryBudgetDetail](d);

WHEN SETCHANGED(budget[SalaryBudgetDetail](SalaryBudgetDetail d)) DO
    budget[BudgetDetail](d) <- budget[SalaryBudgetDetail](d);

WHEN SETCHANGED(SalaryBudgetDetail d IS SalaryBudgetDetail) DO
    name[BudgetDetail](d) <- 'Salary';
    
WHEN SETCHANGED(SalaryBudgetDetail d IS SalaryBudgetDetail) DO
    description[BudgetDetail](d) <- 'Sum of all Employees salaries within Cost Type in this budgeting month.';

WHEN SETCHANGED(salary(costCenter(SalaryBudgetDetail d), costItem(d), budget(d))) DO
    planned[BudgetDetail](d) <- salary(costCenter(d), costItem(d), budget(d));

plannedSalary 'Salary planned, USD' = GROUP SUM planned(SalaryBudgetDetail d) BY costCenter(d), budget(d);
plannedSalary 'Salary planned, USD' = GROUP SUM plannedSalary(CostCenter c, Budget b) BY c, quarterNumber(b);

copyAssigned 'Copy from previous period' (INTEGER q, Employee e) {
    assigned(Period p, e) <- assigned(prevPeriod(p), e) WHERE period(costCenter(p), q) = p AND NOT assigned(p, e) AND NOT readonlyProc(p);
}

// Flow editor
showSensitiveColumns 'Show sensitive columns' = DATA LOCAL NESTED BOOLEAN ();
EXTEND FORM employees
    OBJECTS bq = BudgetQuarter PANEL 
    PROPERTIES(bq) quarterName SELECTOR
    
    OBJECTS q = INTEGER PANEL 
    //PROPERTIES quarterName(q) //SELECTOR 
    //FILTERS quarterBudgeting(q)
    FILTERS quarter(bq) == q
    
    OBJECTS eb = Budget
    FILTERS quarterNumber(eb) == q
    
    //OBJECTS c = CostCenter
    OBJECTS eq = Employee
    PROPERTIES(eq) READONLY firstName, lastName, namePosition
    PROPERTIES assignedQuarter(q, eq) BACKGROUND backgroundAssignedQuarter(q, eq)
    PROPERTIES copyAssigned(q, eq) GRID
    ORDERS lastName(eq), firstName(eq)
    FILTERS isSubstring(lower(firstName(eq)), lower(searchByName())) OR isSubstring(lower(lastName(eq)), lower(searchByName())) OR isSubstring(lower(namePosition(eq)), lower(searchByName())) OR NOT searchByName(),
            NOT fromDate(eb) > fromDate(monthTo(eq))
    FILTERGROUP inactiveq FILTER 'Active' NOT inactive(eq) DEFAULT 
    
    OBJECTS ep = Period//c = CostCenter
    PROPERTIES READONLY BACKGROUND backgroundProtected(q,ep) nameCostCenter(ep)//, quarterPlanned(c,q), plannedSalary(c,q)
    //PROPERTIES BACKGROUND backgroundProtected(q,c) plannedSalary(c,eb) COLUMNS (eb) HEADER name(eb)
    PROPERTIES(ep,eq) READONLYIF (NOT afg(currentUser()) OR readonlyProc(ep)) assigned BACKGROUND backgroundProtected(ep) // READONLYIF (readonlyProc(q, ep) OR NOT afg(currentUser()))
    PROPERTIES READONLYIF (NOT afg(currentUser()) OR readonlyProc(eb,ep)) assigned(ep, eb, eq) BACKGROUND backgroundProtected(q,ep) COLUMNS (eb) HEADER name(eb)
    PROPERTIES BACKGROUND backgroundProtected(q,ep) salary(ep, eq, eb) COLUMNS (eb) HEADER name(eb)
    PROPERTIES BACKGROUND backgroundProtected(q,ep) salary(ep, eq), salaryNet(ep, eq)
    ORDERS nameCostCenter(ep)
    FILTERS period(costCenter(ep),q) == ep
            
    PROPERTIES() searchByName
    
    FILTERGROUP myteam
        FILTER 'Show the only assigned Team for the Cost Center this quarter' isAssignedQuarter(ep,q,eq)
    FILTERGROUP mycostcenter
        FILTER 'Hide archive Cost Centers' NOT archive(costCenter(ep)) DEFAULT
;

DESIGN employees {
    pane {
        NEW budgeting AFTER BOX(ec) {
            caption = 'Budgeting';
            alignment = STRETCH;
            fill = 1;
            type = CONTAINERV;
            MOVE PROPERTY (quarterName(bq)) { caption = 'Select Quarter for budgeting'; }
            MOVE PROPERTY (searchByName());
            NEW flow {
                type = CONTAINERH;
                alignment = STRETCH;
                fill = 1;
                NEW emplQ {
                    width = 600;
                    alignment = STRETCH;
                    MOVE BOX (eq) {fill = 1;}
                }
                MOVE BOX (ep) {fill = 1; alignment = STRETCH;}
                //MOVE BOX (c) {fill = 1;}
                //NEW budgetingDetail {
                //    fill = 3;
                //    MOVE BOX (epe);
                //    MOVE PROPERTY (assignedQuarter(q, eq)) {alignment = STRETCH;}
                //}
            }
        }
    }
}
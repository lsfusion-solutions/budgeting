MODULE BudgetCapCenterContractor;

REQUIRE BudgetCapCenter, Contractor, BudgetCapCenterApproval, Utils, BudgetCapCenterEmployee;

NAMESPACE Budget;

hours 'Hours' = DATA NUMERIC[8,2] (Period, Contractor);
sum 'Fixed amount' = DATA NUMERIC[10,2] (Period, Contractor);

CONSTRAINT DROPPED(Contractor c IS Contractor) AND PREV(hours(Period p, c)) MESSAGE 'Cannot delete a contractor with assigned hours';

contractors 'Total quote, USD' (Period p, Contractor e) = NUMERIC[16,3](round0((rate(e) * hours(p, e) (+) sum(p, e)) / defaultRateOn(currency(e), fromDate(p))));

contractors (Period p, CostItem i) = 
    GROUP SUM contractors(p, Contractor e) BY costItem(e) MATERIALIZED;

EXTEND CLASS ExtraCap {
    contractors 'Contractors'
}
cap (ExtraCap e, Period p, CostItem i) += WHEN e == ExtraCap.contractors AND contractors(p, i) THEN contractors(p, i); 

EXTEND FORM costCenterBudget
    PROPERTIES () filterContractor
    
    OBJECTS cpc = (pc = Period, cc = Contractor)
    PROPERTIES(cc) READONLYIF readonlyProcAll(bm, c) ON CHANGE editContractor(cc) name, nameCostItem, nameType, rate, nameCurrency
    PROPERTIES READONLYIF readonlyProcAll(bm, c) hours(pc, cc), sum(pc, cc), contractors(pc, cc)
    ORDERS name(cc)
    FILTERS isSubstring(lower(name(cc)), lower(filterContractor())) OR isSubstring(taxID(cc), filterContractor()) OR isSubstring(regID(cc), filterContractor()) OR NOT filterContractor(),
            pc == period(c,bm)
;

addContractorBudget '+ Add' () {
    NEWSESSION {
        hideContracts() <- TRUE;
        NEW c = Contractor {
            SHOW contractor OBJECTS c = c FLOAT WAIT;
            SEEK costCenterBudget.cc = c;
        }
    }
} TOOLBAR;
EXTEND FORM costCenterBudget PROPERTIES addContractorBudget() DRAW cpc;

DESIGN costCenterBudget {
    monthlyTabPane {
        NEW contractorsPane AFTER budgetDetail {
            caption = 'Contractors';
            MOVE PROPERTY (filterContractor()) { alignment = STRETCH; }
            MOVE BOX(cpc);
        }
    }
}

// Monthly

//TABLE periodBudgetContractor(Period, Budget, Contractor);
contractor 'Contractor' = DATA Contractor (BudgetDetail);
nameContractor 'Contractor' (BudgetDetail d) = name(contractor(d));

WHEN LOCAL CHANGED(costItem(contractor(BudgetDetail d))) AND NOT CHANGED(costItem(d)) DO
    costItem(d) <- costItem(contractor(d));

CONSTRAINT contractor(BudgetDetail d) AND NOT [ GROUP SUM 1 IF hours(Period p, Contractor c) OR sum(p, c) BY costCenter(p), c](costCenter(d), contractor(d)) 
    CHECKED BY contractor[BudgetDetail] MESSAGE 'Selected contractor for budget detail doesn\'t have assigned hours or sum for the cost center';

budgetDetail (CostCenter c, Budget b, Contractor cc) = GROUP LAST BudgetDetail d ORDER d BY costCenter(d), budget(d), contractor(d);
contractors 'Total amount, USD' (CostCenter c, Budget b, Contractor cc) = GROUP SUM planned(BudgetDetail d) IF NOT hidden(d) BY costCenter(d), budget(d), contractor(d);
contractors 'Total amount (for month), USD' (Period p, Budget b, Contractor cc) = contractors(costCenter(p), b, cc); 

monthlyContractors 'Total in Period, USD' (Period p, Contractor cc) = GROUP SUM contractors(costCenter(p), Budget b, cc) IF selected(p, b);
monthlyContractorsQuarter 'Total in Period, USD' (CostCenter c, Budget b, Contractor cc) = GROUP SUM contractors(c, Budget be, cc) IF quarterNumber(be) == quarterNumber(b);

changeContractors (CostCenter c, Budget b, Contractor cc)  { 
    INPUT q = NUMERIC[16,3] DO { // wait for user input of integer
        IF budgetDetail(c, b, cc) THEN { // look up for existing budget item
            IF q THEN // once number provider
                planned(BudgetDetail d) <- q IF d == budgetDetail(c, b, cc) WHERE costCenter(d) == c AND budget(d) == b AND contractor(d) == cc; // update the linked budget item
            ELSE // when number is empty aqain, then drop the budget details
                DELETE BudgetDetail d WHERE costCenter(d) == c AND budget(d) == b AND contractor(d) == cc;   
        } ELSE
            IF q THEN
                NEW d = BudgetDetail { // create connected Budget item
                    costCenter(d) <- c;
                    budget(d) <- b;
                    contractor(d) <- cc;
                    planned(d) <- q;
                    name(d) <- name(cc);
                    description(d) <- 'Created when added plan of involvement of ' + name(cc);
                }
    }
}

changeContractors (Period p, Budget b, Contractor cc)  { 
    changeContractors(costCenter(p), b, cc);
}
EXTEND FORM costCenterBudget
    OBJECTS cb = Budget
    FILTERS quarterNumber(cb) == quarterNumber(bm)
    //PROPERTIES(cb) READONLY fromDate, toDate, name
    PROPERTIES READONLYIF readonly(cb, c) contractors(c, cb, cc) ON CHANGE changeContractors(c, cb, cc) DRAW cpc COLUMNS (cb) HEADER name(cb)
    //FILTERS selected(p, cb)
    
    PROPERTIES(c, bm, cc) READONLY monthlyContractorsQuarter DRAW cpc
    
    PROPERTIES(bmd) nameContractor
;

//DESIGN costCenterBudget { contractorsPane { MOVE BOX(cb); } }

// Period approval

EXTEND FORM periodApproval
    OBJECTS cc = Contractor
    PROPERTIES(cc) READONLY name, nameType, nameCostItem, nameCurrency, rate
    PROPERTIES(p, cc) READONLY hours, sum, contractors
    FILTERS hours(p, cc) OR sum(p, cc)
;

DESIGN periodApproval {
    details {
        MOVE BOX(cc);
    }
}

hours 'Hours' (Contractor c) = GROUP SUM hours(Period p, c);
sum 'Fixed amount' (Contractor c) = GROUP SUM sum(Period p, c);

contractors 'Total amount, USD' (Contractor c) = GROUP SUM contractors(Period p, c);

EXTEND FORM contractors
    PROPERTIES(c) PANEL READONLY hours, sum, contractors
    
    //OBJECTS p = Period
    //PROPERTIES(p) READONLY nameCostCenter, fromDate, toDate
    //PROPERTIES(p, c) READONLY hours, sum
    //FILTERS hours(p, c) OR sum(p, c)
;


// Spending

TABLE periodBudgetContractor (Period, Budget, Contractor); 
hoursSpent 'Hours, spent' = DATA NUMERIC[8,2] (Period, Budget, Contractor);

hoursSpent 'Total hours, spent' (Period p, Contractor c) = GROUP SUM hoursSpent(p, Budget b, c);

FORM dialogCopyFromBudget 'Budgets'
    OBJECTS c = CostCenter PANEL 
    OBJECTS b = Budget
    PROPERTIES(b) READONLY name, fromDate, toDate
    FILTERS selected(b, c)
;

copyFrom 'Copy from' (Budget bb, CostCenter c) {
    DIALOG dialogCopyFromBudget OBJECTS c = c, b INPUT DO {
        IF quarterNumber(bb) > quarterNumber(b) THEN {        
            FOR budget(BudgetDetail d) == b AND costCenter(d) == c AND NOT sensitive(d) NEW bd = BudgetDetail DO {
                budget(bd) <- bb;
                costCenter(bd) <- c;
                costItem(bd) <- costItem(d);
                name(bd) <- name(d);
                planned(bd) <- planned(d);
                contractor(bd) <- contractor(d);
                sensitive(bd) <- sensitive(d);
            }
        }
        ELSE MESSAGE 'Coping enabled from the previous quarters only.\nFor operations within selected quarter use Move button.';
    }
}

copyTo 'Copy to' (BudgetDetail bb) {
    DIALOG dialogCopyFromBudget OBJECTS c = costCenter(bb), b INPUT DO {
        IF quarterNumber(budget(bb)) <= quarterNumber(b) AND NOT readonly(b, costCenter(bb)) THEN {        
            NEW bd = BudgetDetail {
                budget(bd) <- b;
                costCenter(bd) <- costCenter(bb);
                costItem(bd) <- costItem(bb);
                name(bd) <- name(bb);
                planned(bd) <- planned(bb);
                contractor(bd) <- contractor(bb);
                sensitive(bd) <- sensitive(bb);
            }
        }
        ELSE MESSAGE 'Coping enabled into next quarters only\nand it should be opened for editing.';
    }
}

EXTEND FORM costCenterBudget PROPERTIES READONLYIF readonly(bmd, c) copyFrom(bm, c) DRAW bmd TOOLBAR; 
EXTEND FORM costCenterBudget PROPERTIES(bmd) copyTo TOOLBAR; 